// https://github.com/john-tipper/git-semantic-versioning
plugins {
    id 'java'
    id 'idea'
    id 'org.flywaydb.flyway' version '6.5.4'
    id 'io.spring.dependency-management' version '1.0.10.RELEASE'
    id 'org.springframework.boot' version '2.3.4.RELEASE'
    id 'io.freefair.lombok' version '5.2.1'
    id 'org.sonarqube' version '3.0'
    id 'org.owasp.dependencycheck' version '6.0.1'
    id "com.avast.gradle.docker-compose" version "0.13.3"
    id "io.wusa.semver-git-plugin" version "2.3.1"
    id 'jacoco'
}

group = 'org.tec'
project.version = semver.info

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

flyway {
    url = "jdbc:mariadb://${db_host}:${db_port}/"
    user = "${db_username}"
    password = "${db_password}"
    schemas = ["feature"]
    locations = ["filesystem:$rootProject.projectDir/src/main/sql/releases"]
    placeholderReplacement = false
}

/**
 * task to drop and reload the DB
 * https://docs.gradle.org/current/userguide/tutorial_using_tasks.html
 * https://discuss.gradle.org/t/how-to-set-up-the-sql-statement-when-calling-ant-sql-task/5743
 * need to quote the name to leverage dot notation
 */
task dbReset {
    group = 'db'
    description 'task to drop and reload the DB'
    dependsOn flywayClean,flywayMigrate

    doLast {
        ant.echo("sql url:" + "jdbc:mariadb://${db_host}:${db_port}/feature")
        ant.echo("project.gradle.gradleUserHomeDir:" + "$project.gradle.gradleUserHomeDir")
        ant.echo("rootProject.projectDir:" + "$rootProject.projectDir")
        ant.echo("url:" + "jdbc:mariadb://${db_host}:${db_port}/feature")

        ant.sql(classpath: configurations.db.asPath,
                driver: 'org.mariadb.jdbc.Driver',
                url: "jdbc:mariadb://${db_host}:${db_port}/feature",
                userid: "${db_username}",
                password: "${db_password}",
                delimiter: ';;',
                delimitertype: 'normal'
        ) {
            transaction(src: "$rootProject.projectDir/src/main/sql/sample_data/users.sql")
            transaction(src: "$rootProject.projectDir/src/main/sql/sample_data/features.sql")
        }
    }
}

bootJar {
    mainClassName = 'org.tec.togglz.App'

    manifest {
        attributes(
                'Built-By'       : System.properties['user.name'],
                'Build-Timestamp': new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ").format(new Date()),
                'Build-Revision' : semver.info,
                'Build-Hash'     : semver.info.commit,
                'Created-By'     : "Gradle ${gradle.gradleVersion}",
                'Build-Jdk'      : "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})",
                'Build-OS'       : "${System.properties['os.name']} ${System.properties['os.arch']} ${System.properties['os.version']}"
        )
    }
}

test {
    useJUnitPlatform{
        excludeTags 'skip'
    }

    testLogging.showStandardStreams = true
    testLogging.showStackTraces = true

    // Always run tests, even when nothing changed.
    dependsOn 'cleanTest'

    // Show test results.
    testLogging {
        events "passed", "skipped", "failed"
    }
}

tasks['sonarqube'].dependsOn test, dependencyCheckAnalyze
//dependencyCheckAggregate

sonarqube {
    properties {
        property 'sonar.coverage.exclusions', "**/config/**"
    }
}

jacocoTestReport {
    reports {
        xml.enabled true
    }
}

test.finalizedBy jacocoTestReport

dependencyCheck {
    formats=['HTML', 'JSON', 'XML']
}

/**
 * sonar container
 * https://github.com/avast/gradle-docker-compose-plugin
 * see nested config
 */
dockerCompose {
    sonar {
        useComposeFiles = ['sonar-docker-compose.yml']
    }
}

repositories {
    mavenCentral()
    jcenter()
    maven {
        url 'https://plugins.gradle.org/m2/'
    }
}

configurations {
    db
}

dependencies {
    //spring
    implementation 'org.springframework.boot:spring-boot-starter:2.3.4.RELEASE'
    implementation 'org.springframework.boot:spring-boot-starter-web:2.3.4.RELEASE'
    implementation 'org.springframework.boot:spring-boot-starter-security:2.3.4.RELEASE'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa:2.3.4.RELEASE'

    //togglz
    implementation 'org.togglz:togglz-console:2.8.0'
    implementation 'org.togglz:togglz-spring-boot-starter:2.8.0'
    implementation 'org.togglz:togglz-spring-security:2.8.0'

    implementation'commons-codec:commons-codec:1.5'
    implementation'org.apache.commons:commons-lang3:3.11'

    //mariadb
    runtimeOnly 'org.mariadb.jdbc:mariadb-java-client:2.6.2'
    //to get ant.sql working
    db 'org.mariadb.jdbc:mariadb-java-client:2.6.2'

    compileOnly 'org.projectlombok:lombok'

    annotationProcessor 'org.projectlombok:lombok:1.18.12'

    testImplementation('org.springframework.boot:spring-boot-starter-test:2.3.4.RELEASE') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }

    testImplementation 'org.springframework.security:spring-security-test:5.4.0'
}