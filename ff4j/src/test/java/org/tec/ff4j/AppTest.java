/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package org.tec.ff4j;

import org.ff4j.FF4j;
import org.ff4j.core.Feature;
import org.ff4j.web.FF4jDispatcherServlet;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.AuthorityUtils;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.provisioning.JdbcUserDetailsManager;
import org.springframework.test.context.junit.jupiter.SpringExtension;

import javax.sql.DataSource;

import java.util.List;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.*;

@ExtendWith(SpringExtension.class)
@SpringBootTest(classes={App.class})
class AppTest {

    @Autowired
    App app;

    @Autowired
    DataSource dataSource;

    @Autowired
    FF4j ff4j;

    @Autowired
    FF4jDispatcherServlet ff4jDispatcherServlet;

    @Autowired
    JdbcUserDetailsManager jdbcUserDetailsManager;

    @Autowired
    PasswordEncoder passwordEncoder;

    @Test
    void testConfig() {
        Assertions.assertNotNull(app);
        Assertions.assertNotNull(dataSource);
        Assertions.assertNotNull(ff4j);
        Assertions.assertNotNull(ff4jDispatcherServlet);
    }

    @Test
    void testSimpleFT() {
        Assertions.assertTrue(ff4j.exist("sample_enable"));
        Assertions.assertTrue(ff4j.check("sample_enable"));

        Assertions.assertTrue(ff4j.exist("sample_disable"));
        Assertions.assertFalse(ff4j.check("sample_disable"));
    }

    @Test
    void testDateDrivenFT() {
        Assertions.assertTrue(ff4j.exist("past_feature"));
        Assertions.assertTrue(ff4j.check("past_feature"));

        // driven by past date but is disabled
        Assertions.assertTrue(ff4j.exist("past_disabled"));
        Assertions.assertFalse(ff4j.check("past_disabled"));

        Assertions.assertTrue(ff4j.exist("future_feature"));
        Assertions.assertFalse(ff4j.check("future_feature"));
    }

    @Test
    void testGroupFT() {
        String groupName1 = "group_1";
        Map<String, Feature> group1 = ff4j.getFeatureStore().readGroup(groupName1);
        Assertions.assertFalse(group1.isEmpty());

        Assertions.assertTrue(group1.containsKey("sample_gp1_enable"));
        Assertions.assertTrue(group1.get("sample_gp1_enable").isEnable());
        Assertions.assertTrue(group1.containsKey("sample_gp1_disable"));
        Assertions.assertFalse(group1.get("sample_gp1_disable").isEnable());

        String groupName2 = "group_2";
        ff4j.disableGroup(groupName2);
        Map<String, Feature> group2 = ff4j.getFeatureStore().readGroup(groupName2);
        Assertions.assertFalse(group2.isEmpty());

        group2.entrySet().stream().forEach(e -> Assertions.assertFalse(e.getValue().isEnable()));
    }

    @Test
    @Tag("exclude")
    void testCreateUser(){
        createUser("admin", "admin", false, "ROLE_ADMIN");
        createUser("user", "user", false, "ROLE_USER");
        createUser("disabled", "disabled", true, "ROLE_USER");
    }

    private void createUser(String username, String password, boolean disabled, String role) {
        List<GrantedAuthority> authorities = AuthorityUtils.createAuthorityList(role);

        UserDetails user = User.builder()
                .username(username)
                .password(passwordEncoder.encode(password))
                .authorities(authorities)
                .disabled(disabled)
                .build();

        jdbcUserDetailsManager.createUser(user);

        UserDetails actual = jdbcUserDetailsManager.loadUserByUsername(username);

        Assertions.assertTrue(passwordEncoder.matches(password, actual.getPassword()));
        Assertions.assertEquals(actual.isEnabled(), !disabled);
    }
}